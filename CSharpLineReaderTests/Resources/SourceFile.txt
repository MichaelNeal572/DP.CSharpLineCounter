using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using Homii.Orchestration.Core.Eventing;
using Homii.Orchestration.Core.PreBookings;

namespace Homii.Orchestration.Projection.ProjectOnWrite.Sql {
  public class SetPreBookingLatestPaymentInStorage : ProjectStorageEventIntoDatabase<SetPreBookingLatestPaymentDto>
  {
    private readonly IPutPreBookingsIntoStorage _putter;
    private readonly IFetchPreBookingsFromStorage _fetcher;
    private readonly IMapper _mapper;

    public override StorageEventType TargetEvent => StorageEventType.SetPreBookingLatestPayment;

    public SetPreBookingLatestPaymentInStorage(IPutPreBookingsIntoStorage putter, IFetchPreBookingsFromStorage fetcher, IMapper mapper)
    {
      _putter = putter;
      _fetcher = fetcher;
      _mapper = mapper;
    }

    protected override async Task OnProject(StorageEvent<SetPreBookingLatestPaymentDto> storageEvent, CancellationToken token)
    {
      var existingRecord = await _fetcher.Fetch(storageEvent.Id, token);
      if (existingRecord == null)
      {
        return;
      }
      _mapper.Map(storageEvent.Payload, existingRecord.Value);
      await _putter.Update(existingRecord.WithVersionFrom(storageEvent), token);
    }
  }
}
